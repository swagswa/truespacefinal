#!/usr/bin/env node

const dotenv = require('dotenv');
const result = dotenv.config();
console.log('üîß Dotenv result:', result);
const https = require('https');

class TelegramBot {
  constructor(token) {
    this.token = token;
    this.offset = 0;
    this.isRunning = false;
    
    console.log('üîç Environment variables:');
    console.log('WEB_APP_URL:', process.env.WEB_APP_URL);
    console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL);
    
    this.webAppUrl = process.env.WEB_APP_URL || process.env.NEXTAUTH_URL || 'http://localhost:3001';
    console.log('üåê Final webAppUrl:', this.webAppUrl);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API
  makeRequest(method, data = {}) {
    return new Promise((resolve, reject) => {
      const postData = JSON.stringify(data);
      
      const options = {
        hostname: 'api.telegram.org',
        port: 443,
        path: `/bot${this.token}/${method}`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(postData)
        }
      };

      const req = https.request(options, (res) => {
        let responseData = '';
        
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        
        res.on('end', () => {
          try {
            const result = JSON.parse(responseData);
            if (result.ok) {
              resolve(result.result);
            } else {
              reject(new Error(`Telegram API Error: ${result.description}`));
            }
          } catch (error) {
            reject(new Error(`Parse Error: ${error.message}`));
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.write(postData);
      req.end();
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId, text, replyMarkup = null) {
    const data = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };

    if (replyMarkup) {
      data.reply_markup = replyMarkup;
    }

    try {
      return await this.makeRequest('sendMessage', data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  async getUpdates() {
    try {
      const updates = await this.makeRequest('getUpdates', {
        offset: this.offset,
        timeout: 10,
        allowed_updates: ['message']
      });

      if (updates && updates.length > 0) {
        this.offset = updates[updates.length - 1].update_id + 1;
        return updates;
      }

      return [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
      return [];
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStartCommand(chatId, firstName) {
    const welcomeText = `
üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrueUrok, ${firstName}!</b>

–≠—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
    `;

    const keyboard = {
      inline_keyboard: [[
        {
          text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å TrueUrok",
          web_app: { url: this.webAppUrl }
        }
      ]]
    };

    await this.sendMessage(chatId, welcomeText, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  async handleHelpCommand(chatId) {
    const helpText = `
üìö <b>–ü–æ–º–æ—â—å –ø–æ TrueUrok</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ò–∑—É—á–∞—Ç—å —É—Ä–æ–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!
    `;

    await this.sendMessage(chatId, helpText);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /webapp
  async handleWebAppCommand(chatId) {
    const webappText = `
üåê <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TrueUrok</b>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    `;

    const keyboard = {
      inline_keyboard: [[
        {
          text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
          web_app: { url: this.webAppUrl }
        }
      ]]
    };

    await this.sendMessage(chatId, webappText, keyboard);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async handleMessage(message) {
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${firstName} (${chatId}): ${text}`);

    if (text.startsWith('/start')) {
      await this.handleStartCommand(chatId, firstName);
    } else if (text === '/help') {
      await this.handleHelpCommand(chatId);
    } else if (text === '/webapp') {
      await this.handleWebAppCommand(chatId);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const responseText = `
–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø –±–æ—Ç TrueUrok. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å
/webapp - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
      `;

      const keyboard = {
        inline_keyboard: [[
          {
            text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å TrueUrok",
            web_app: { url: this.webAppUrl }
          }
        ]]
      };

      await this.sendMessage(chatId, responseText, keyboard);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
  async start() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    console.log(`üîß WEB_APP_URL: ${process.env.WEB_APP_URL}`);
    console.log(`üîß NEXTAUTH_URL: ${process.env.NEXTAUTH_URL}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      const me = await this.makeRequest('getMe');
      console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username} (${me.first_name})`);
      console.log(`üåê Web App URL: ${this.webAppUrl}`);
      
      this.isRunning = true;
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
      while (this.isRunning) {
        try {
          const updates = await this.getUpdates();
          
          for (const update of updates) {
            if (update.message) {
              await this.handleMessage(update.message);
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ polling:', error.message);
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
      process.exit(1);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    this.isRunning = false;
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main() {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }

  const bot = new TelegramBot(token);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    bot.stop();
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    bot.stop();
    process.exit(0);
  });

  await bot.start();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = TelegramBot;