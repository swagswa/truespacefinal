// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Theme {
  id          Int        @id @default(autoincrement())
  slug        String     @unique
  title       String
  description String
  icon        String
  subtopics   Subtopic[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("themes")
}

model Subtopic {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  theme       Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  themeId     Int
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subtopics")
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  content     String
  duration    Int      @default(0)
  subtopic    Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  subtopicId  Int
  favorites   UserFavoriteLesson[]
  completions UserLessonCompletion[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String?  @unique
  name          String?
  sessionId     String?  @unique
  // Telegram fields
  telegramId    String?  @unique
  username      String?
  firstName     String?
  lastName      String?
  photoUrl      String?
  languageCode  String?
  isPremium     Boolean? @default(false)
  // Relations
  favorites     UserFavoriteLesson[]
  completions   UserLessonCompletion[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model UserFavoriteLesson {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int
  createdAt DateTime @default(now())

  @@unique([userId, lessonId])
  @@map("user_favorite_lessons")
}

model UserLessonCompletion {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    Int
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, lessonId])
  @@map("user_lesson_completions")
}
