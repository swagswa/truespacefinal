generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Theme {
  id          Int        @id @default(autoincrement())
  slug        String     @unique
  title       String
  description String
  icon        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  subtopics   Subtopic[]

  @@map("themes")
}

model Subtopic {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  themeId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  theme       Theme    @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("subtopics")
}

model Lesson {
  id          Int                    @id @default(autoincrement())
  title       String
  slug        String                 @unique
  description String
  content     String
  duration    Int                    @default(0)
  subtopicId  Int
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  subtopic    Subtopic               @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  favorites   UserFavoriteLesson[]
  completions UserLessonCompletion[]

  @@map("lessons")
}

model User {
  id           Int                    @id @default(autoincrement())
  email        String?                @unique
  name         String?
  sessionId    String?                @unique
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  firstName    String?
  isPremium    Boolean?               @default(false)
  languageCode String?
  lastName     String?
  photoUrl     String?
  telegramId   String?                @unique
  username     String?
  favorites    UserFavoriteLesson[]
  completions  UserLessonCompletion[]

  @@map("users")
}

model UserFavoriteLesson {
  id        Int      @id @default(autoincrement())
  userId    Int
  lessonId  Int
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_favorite_lessons")
}

model UserLessonCompletion {
  id          Int      @id @default(autoincrement())
  userId      Int
  lessonId    Int
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_lesson_completions")
}
