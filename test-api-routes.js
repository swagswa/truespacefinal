const { spawn } = require('child_process');
const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function waitForServer(port, maxAttempts = 30) {
  for (let i = 0; i < maxAttempts; i++) {
    try {
      await new Promise((resolve, reject) => {
        const req = http.get(`http://localhost:${port}/api/themes`, (res) => {
          resolve(res);
        });
        req.on('error', reject);
        req.setTimeout(1000, () => {
          req.destroy();
          reject(new Error('Timeout'));
        });
      });
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } catch (error) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞... –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxAttempts}`);
      await delay(2000);
    }
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(options) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
        } catch (error) {
          resolve({ status: res.statusCode, data: data, headers: res.headers });
        }
      });
    });
    
    req.on('error', reject);
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });
    
    if (options.body) {
      req.write(options.body);
    }
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testApiRoutes() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Ä–æ—É—Ç–æ–≤...\n');

  // –ó–∞–ø—É—Å–∫–∞–µ–º dev —Å–µ—Ä–≤–µ—Ä
  console.log('üì¶ –ó–∞–ø—É—Å–∫ Next.js dev —Å–µ—Ä–≤–µ—Ä–∞...');
  const server = spawn('npm', ['run', 'dev'], {
    stdio: ['pipe', 'pipe', 'pipe'],
    shell: true
  });

  let serverOutput = '';
  server.stdout.on('data', (data) => {
    serverOutput += data.toString();
    if (data.toString().includes('Ready')) {
      console.log('‚úÖ Next.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }
  });

  server.stderr.on('data', (data) => {
    console.log('Server stderr:', data.toString());
  });

  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  const serverReady = await waitForServer(3000);
  
  if (!serverReady) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    server.kill();
    return;
  }

  try {
    console.log('\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤...\n');

    // –¢–µ—Å—Ç 1: GET /api/themes
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/themes');
    try {
      const themesResponse = await makeRequest({
        hostname: 'localhost',
        port: 3000,
        path: '/api/themes',
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log(`   –°—Ç–∞—Ç—É—Å: ${themesResponse.status}`);
      if (themesResponse.status === 200) {
        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ç–µ–º—ã');
        console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º: ${themesResponse.data.themes?.length || 0}`);
      } else {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º');
        console.log('   üìÑ –û—Ç–≤–µ—Ç:', JSON.stringify(themesResponse.data, null, 2));
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    // –¢–µ—Å—Ç 2: GET /api/favorites
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/favorites');
    try {
      const favoritesResponse = await makeRequest({
        hostname: 'localhost',
        port: 3000,
        path: '/api/favorites',
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-session-id': 'test-session-123'
        }
      });
      
      console.log(`   –°—Ç–∞—Ç—É—Å: ${favoritesResponse.status}`);
      if (favoritesResponse.status === 200) {
        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–µ');
        console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: ${favoritesResponse.data.favorites?.length || 0}`);
      } else {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö');
        console.log('   üìÑ –û—Ç–≤–µ—Ç:', JSON.stringify(favoritesResponse.data, null, 2));
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    // –¢–µ—Å—Ç 3: GET /api/completed
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/completed');
    try {
      const completedResponse = await makeRequest({
        hostname: 'localhost',
        port: 3000,
        path: '/api/completed',
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'x-session-id': 'test-session-123'
        }
      });
      
      console.log(`   –°—Ç–∞—Ç—É—Å: ${completedResponse.status}`);
      if (completedResponse.status === 200) {
        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏');
        console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${completedResponse.data.completed?.length || 0}`);
      } else {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤');
        console.log('   üìÑ –û—Ç–≤–µ—Ç:', JSON.stringify(completedResponse.data, null, 2));
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.kill();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await delay(2000);
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testApiRoutes().catch(console.error);