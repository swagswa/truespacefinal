import { NextRequest, NextResponse } from 'next/server';

// –¢–∏–ø—ã –¥–ª—è Telegram API
interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

interface TelegramMessage {
  message_id: number;
  from?: TelegramUser;
  chat: {
    id: number;
    type: string;
    first_name?: string;
    last_name?: string;
    username?: string;
  };
  date: number;
  text?: string;
}

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
interface InlineKeyboardMarkup {
  inline_keyboard: Array<Array<{
    text: string;
    web_app?: { url: string };
  }>>;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: InlineKeyboardMarkup) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN not found');
    return false;
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        reply_markup: replyMarkup,
        parse_mode: 'HTML'
      }),
    });

    const result = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Telegram API error:', result);
      return false;
    }

    console.log('‚úÖ Message sent successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(chatId: number, user: TelegramUser) {
  const webAppUrl = process.env.NEXTAUTH_URL || 'https://truespacefinal.vercel.app';
  
  const welcomeText = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –æ–±—É—á–∞—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Web App –∏ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤.

üîê –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
  `;

  const replyMarkup = {
    inline_keyboard: [
      [
        {
          text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
          web_app: {
            url: webAppUrl
          }
        }
      ]
    ]
  };

  return await sendTelegramMessage(chatId, welcomeText, replyMarkup);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelpCommand(chatId: number) {
  const helpText = `
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å Web App
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/webapp - –û—Ç–∫—Ä—ã—Ç—å Web App –Ω–∞–ø—Ä—è–º—É—é

üì± –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
  `;

  return await sendTelegramMessage(chatId, helpText);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp
async function handleWebAppCommand(chatId: number) {
  const webAppUrl = process.env.NEXTAUTH_URL || 'https://truespacefinal.vercel.app';
  
  const replyMarkup = {
    inline_keyboard: [
      [
        {
          text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å Web App",
          web_app: {
            url: webAppUrl
          }
        }
      ]
    ]
  };

  return await sendTelegramMessage(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", replyMarkup);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
export async function POST(request: NextRequest) {
  try {
    console.log('ü§ñ Telegram webhook received');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
      return NextResponse.json({ error: 'Bot token not configured' }, { status: 500 });
    }

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const update: TelegramUpdate = await request.json();
    console.log('üì® Update received:', JSON.stringify(update, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!update.message) {
      console.log('‚ÑπÔ∏è No message in update, ignoring');
      return NextResponse.json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text;
    const user = message.from;

    if (!user) {
      console.log('‚ÑπÔ∏è No user in message, ignoring');
      return NextResponse.json({ ok: true });
    }

    console.log(`üë§ User: ${user.first_name} (${user.id})`);
    console.log(`üí¨ Message: ${text}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text?.startsWith('/')) {
      const command = text.split(' ')[0].toLowerCase();
      
      switch (command) {
        case '/start':
          await handleStartCommand(chatId, user);
          break;
        case '/help':
          await handleHelpCommand(chatId);
          break;
        case '/webapp':
          await handleWebAppCommand(chatId);
          break;
        default:
          await sendTelegramMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
      }
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await sendTelegramMessage(
        chatId, 
        '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
      );
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram webhook is running',
    timestamp: new Date().toISOString()
  });
}