import { PrismaClient } from '@prisma/client';

// Global variable to store Prisma client instance
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

// Create Prisma client instance
export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  });

// In development, store the client on the global object to prevent multiple instances
if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

// Database connection helper
export async function connectToDatabase() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Connected to database');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to connect to database:', error);
    return false;
  }
}

// Database disconnection helper
export async function disconnectFromDatabase() {
  try {
    await prisma.$disconnect();
    console.log('‚úÖ Disconnected from database');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to disconnect from database:', error);
    return false;
  }
}

// Health check helper
export async function checkDatabaseHealth() {
  try {
    await prisma.$queryRaw`SELECT 1`;
    return { status: 'ok', message: 'Database is healthy' };
  } catch (error) {
    console.error('Database health check failed:', error);
    return { status: 'error', message: 'Database is not responding' };
  }
}

// Seed data helper
export async function seedDatabase() {
  try {
    // Check if data already exists
    const existingThemes = await prisma.theme.count();
    if (existingThemes > 0) {
      console.log('Database already seeded');
      return;
    }

    // Create sample themes
    const aiTheme = await prisma.theme.create({
      data: {
        slug: 'ai-assistants',
        title: 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
        description: '–ò–∑—É—á–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
        icon: 'ü§ñ',
        subtopics: {
          create: [
            {
              title: '–°–ø—Ä–∏–Ω—Ç —Å–µ–Ω—Ç—è–±—Ä—å 2025',
              slug: 'sprint-sentyabr-2025',
              description: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º',
              lessons: {
                create: [
                  {
                    title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ AI',
                    slug: 'vvedenie-v-ai',
                    description: '–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                    content: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∏—Ä AI...',
                    duration: 30,
                  },
                  {
                    title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
                    slug: 'nastroyka-ai-assistenta',
                    description: '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–µ–≥–æ AI –ø–æ–º–æ—â–Ω–∏–∫–∞',
                    content: '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ...',
                    duration: 45,
                  },
                ],
              },
            },
            {
              title: '–ê—Ä—Ö–∏–≤',
              slug: 'arhiv',
              description: '–ê—Ä—Ö–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ AI',
              lessons: {
                create: [
                  {
                    title: '–ò—Å—Ç–æ—Ä–∏—è AI',
                    slug: 'istoriya-ai',
                    description: '–†–∞–∑–≤–∏—Ç–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞',
                    content: '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π...',
                    duration: 25,
                  },
                ],
              },
            },
          ],
        },
      },
    });

    const webTheme = await prisma.theme.create({
      data: {
        slug: 'web-development',
        title: '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        icon: 'üíª',
        subtopics: {
          create: [
            {
              title: 'Frontend',
              slug: 'frontend',
              description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
              lessons: {
                create: [
                  {
                    title: 'React –æ—Å–Ω–æ–≤—ã',
                    slug: 'react-osnovy',
                    description: '–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ React',
                    content: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ React –±–∏–±–ª–∏–æ—Ç–µ–∫—É...',
                    duration: 60,
                  },
                ],
              },
            },
            {
              title: 'Backend',
              slug: 'backend',
              description: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
              lessons: {
                create: [
                  {
                    title: 'Node.js –æ—Å–Ω–æ–≤—ã',
                    slug: 'nodejs-osnovy',
                    description: '–ò–∑—É—á–µ–Ω–∏–µ Node.js',
                    content: '–û—Å–Ω–æ–≤—ã —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Node.js...',
                    duration: 50,
                  },
                ],
              },
            },
          ],
        },
      },
    });

    console.log('‚úÖ Database seeded successfully');
    return { aiTheme, webTheme };
  } catch (error) {
    console.error('‚ùå Failed to seed database:', error);
    throw error;
  }
}