const { Client } = require('pg');

const client = new Client({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres.digqlqjbdtbwvrgggrnl:50GV5cssgniHFpBg@aws-1-eu-north-1.pooler.supabase.com:6543/postgres'
});

async function seedData() {
  try {
    await client.connect();
    console.log('‚úÖ Connected to Supabase database!');

    // Check if data already exists
    const existingThemes = await client.query('SELECT COUNT(*) FROM "Theme"');
    if (parseInt(existingThemes.rows[0].count) > 0) {
      console.log('Database already has data, skipping seed');
      return;
    }

    console.log('Seeding database with test data...');

    // Insert themes
    const aiThemeResult = await client.query(`
      INSERT INTO "Theme" (slug, title, description, icon, "createdAt", "updatedAt")
      VALUES ('ai-assistants', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã', '–ò–∑—É—á–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞', 'ü§ñ', NOW(), NOW())
      RETURNING id
    `);
    const aiThemeId = aiThemeResult.rows[0].id;

    const webThemeResult = await client.query(`
      INSERT INTO "Theme" (slug, title, description, icon, "createdAt", "updatedAt")
      VALUES ('web-development', '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'üíª', NOW(), NOW())
      RETURNING id
    `);
    const webThemeId = webThemeResult.rows[0].id;

    console.log('‚úÖ Themes created');

    // Insert subtopics for AI theme
    const aiSprintResult = await client.query(`
      INSERT INTO "Subtopic" (slug, title, description, "themeId", "createdAt", "updatedAt")
      VALUES ('sprint-september-2025', '–°–ø—Ä–∏–Ω—Ç —Å–µ–Ω—Ç—è–±—Ä—å 2025', '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –∫—É—Ä—Å –ø–æ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º', $1, NOW(), NOW())
      RETURNING id
    `, [aiThemeId]);
    const aiSprintId = aiSprintResult.rows[0].id;

    const aiArchiveResult = await client.query(`
      INSERT INTO "Subtopic" (slug, title, description, "themeId", "createdAt", "updatedAt")
      VALUES ('archive', '–ê—Ä—Ö–∏–≤', '–ê—Ä—Ö–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ AI', $1, NOW(), NOW())
      RETURNING id
    `, [aiThemeId]);
    const aiArchiveId = aiArchiveResult.rows[0].id;

    // Insert subtopics for Web theme
    const frontendResult = await client.query(`
      INSERT INTO "Subtopic" (slug, title, description, "themeId", "createdAt", "updatedAt")
      VALUES ('frontend', 'Frontend', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤', $1, NOW(), NOW())
      RETURNING id
    `, [webThemeId]);
    const frontendId = frontendResult.rows[0].id;

    const backendResult = await client.query(`
      INSERT INTO "Subtopic" (slug, title, description, "themeId", "createdAt", "updatedAt")
      VALUES ('backend', 'Backend', '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', $1, NOW(), NOW())
      RETURNING id
    `, [webThemeId]);
    const backendId = backendResult.rows[0].id;

    console.log('‚úÖ Subtopics created');

    // Insert lessons
    await client.query(`
      INSERT INTO "Lesson" (slug, title, content, "subtopicId", "createdAt", "updatedAt")
      VALUES 
        ('intro-to-ai', '–í–≤–µ–¥–µ–Ω–∏–µ –≤ AI', '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ –º–∏—Ä –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ AI, –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.', $1, NOW(), NOW()),
        ('ai-setup', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞', '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–∞—à–µ–≥–æ AI –ø–æ–º–æ—â–Ω–∏–∫–∞. –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É AI.', $1, NOW(), NOW()),
        ('ai-history', '–ò—Å—Ç–æ—Ä–∏—è AI', '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –æ—Ç –ø–µ—Ä–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.', $2, NOW(), NOW()),
        ('react-basics', 'React –æ—Å–Ω–æ–≤—ã', '–í–≤–µ–¥–µ–Ω–∏–µ –≤ React –±–∏–±–ª–∏–æ—Ç–µ–∫—É. –ò–∑—É—á–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ–ø—Å—ã –∏ –æ—Å–Ω–æ–≤—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.', $3, NOW(), NOW()),
        ('nodejs-basics', 'Node.js –æ—Å–Ω–æ–≤—ã', '–û—Å–Ω–æ–≤—ã —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Node.js. –°–æ–∑–¥–∞–Ω–∏–µ API, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.', $4, NOW(), NOW())
    `, [aiSprintId, aiArchiveId, frontendId, backendId]);

    console.log('‚úÖ Lessons created');

    // Create a test user
    await client.query(`
      INSERT INTO "User" (id, email, name, "createdAt", "updatedAt")
      VALUES ('test-user-1', 'test@example.com', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', NOW(), NOW())
      ON CONFLICT (id) DO NOTHING
    `);

    console.log('‚úÖ Test user created');

    console.log('üéâ Database seeded successfully!');

  } catch (error) {
    console.error('‚ùå Error seeding database:', error.message);
  } finally {
    await client.end();
  }
}

seedData();