#!/usr/bin/env node

require('dotenv').config();
const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –±–æ—Ç–∞...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
function startTelegramBot() {
  console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...');
  
  const botProcess = spawn('node', ['telegram-bot-polling.js'], {
    stdio: 'inherit',
    cwd: process.cwd(),
    env: process.env
  });

  botProcess.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞:', err);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
    botProcess.kill('SIGINT');
  });

  process.on('SIGTERM', () => {
    botProcess.kill('SIGTERM');
  });

  return botProcess;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Next.js
function startNextJS() {
  console.log('üåê –ó–∞–ø—É—Å–∫ Next.js —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
  
  const nextProcess = spawn('npm', ['run', 'dev:next'], {
    stdio: 'inherit',
    shell: true,
    cwd: process.cwd()
  });

  nextProcess.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Next.js:', err);
    process.exit(1);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on('SIGINT', () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    nextProcess.kill('SIGINT');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    nextProcess.kill('SIGTERM');
    process.exit(0);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    const botProcess = startTelegramBot();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º Next.js
    startNextJS();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
  }
}

main();