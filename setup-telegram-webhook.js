#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node setup-telegram-webhook.js
 */

const https = require('https');
require('dotenv').config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.NEXTAUTH_URL || 'https://truespacefinal.vercel.app';

if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

console.log('ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...');
console.log(`üîó Webhook URL: ${WEBHOOK_URL}/api/telegram/webhook`);
console.log(`üîë Bot Token: ${BOT_TOKEN.substring(0, 10)}...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      method: data ? 'POST' : 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    };

    const req = https.request(url, options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve(parsed);
        } catch (error) {
          reject(new Error(`Failed to parse response: ${responseData}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function setupWebhook() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
    const botInfo = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getMe`);
    
    if (!botInfo.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${botInfo.description}`);
    }
    
    console.log(`‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @${botInfo.result.username} (${botInfo.result.first_name})`);

    // 2. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ webhook...');
    const deleteResult = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
    
    if (deleteResult.ok) {
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook —É–¥–∞–ª–µ–Ω');
    } else {
      console.log('‚ÑπÔ∏è Webhook –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ');
    }

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    console.log('\nüîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...');
    const webhookData = {
      url: `${WEBHOOK_URL}/api/telegram/webhook`,
      allowed_updates: ['message']
    };

    const setResult = await makeRequest(
      `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`,
      webhookData
    );

    if (!setResult.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${setResult.description}`);
    }

    console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook...');
    const webhookInfo = await makeRequest(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    
    if (webhookInfo.ok) {
      const info = webhookInfo.result;
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log(`   URL: ${info.url}`);
      console.log(`   Pending updates: ${info.pending_update_count}`);
      console.log(`   Last error date: ${info.last_error_date || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
      console.log(`   Last error message: ${info.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`);
    }

    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
    console.log('   1. –ù–∞–π—Ç–∏ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram: @' + botInfo.result.username);
    console.log('   2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start');
    console.log('   3. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupWebhook();