const { Pool } = require('pg');
require('dotenv').config();

async function migrateAndCleanupData() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres.digqlqjbdtbwvrgggrnl:50GV5cssgniHFpBg@aws-1-eu-north-1.pooler.supabase.com:6543/postgres',
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    console.log('üîÑ Migrating data and cleaning up duplicates...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    console.log('üìä Data in uppercase tables:');
    
    const userDataUpper = await pool.query('SELECT * FROM "User" ORDER BY id');
    console.log(`  "User" table: ${userDataUpper.rows.length} records`);
    userDataUpper.rows.forEach(user => {
      console.log(`    ID: ${user.id}, Email: ${user.email}, TelegramId: ${user.telegramId}`);
    });

    const favoritesDataUpper = await pool.query('SELECT * FROM "UserFavoriteLesson" ORDER BY id');
    console.log(`  "UserFavoriteLesson" table: ${favoritesDataUpper.rows.length} records`);
    favoritesDataUpper.rows.forEach(fav => {
      console.log(`    ID: ${fav.id}, User: ${fav.userId}, Lesson: ${fav.lessonId}`);
    });

    const completionsDataUpper = await pool.query('SELECT * FROM "UserLessonCompletion" ORDER BY id');
    console.log(`  "UserLessonCompletion" table: ${completionsDataUpper.rows.length} records`);
    completionsDataUpper.rows.forEach(comp => {
      console.log(`    ID: ${comp.id}, User: ${comp.userId}, Lesson: ${comp.lessonId}`);
    });

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
    console.log('\nüìä Data in lowercase tables:');
    
    const userDataLower = await pool.query('SELECT * FROM users ORDER BY id');
    console.log(`  users table: ${userDataLower.rows.length} records`);
    userDataLower.rows.forEach(user => {
      console.log(`    ID: ${user.id}, Email: ${user.email}, TelegramId: ${user.telegramId}`);
    });

    const favoritesDataLower = await pool.query('SELECT * FROM user_favorite_lessons ORDER BY "userId", "lessonId"');
    console.log(`  user_favorite_lessons table: ${favoritesDataLower.rows.length} records`);
    favoritesDataLower.rows.forEach(fav => {
      console.log(`    User: ${fav.userId}, Lesson: ${fav.lessonId}`);
    });

    const completionsDataLower = await pool.query('SELECT * FROM user_lesson_completions ORDER BY "userId", "lessonId"');
    console.log(`  user_lesson_completions table: ${completionsDataLower.rows.length} records`);
    completionsDataLower.rows.forEach(comp => {
      console.log(`    User: ${comp.userId}, Lesson: ${comp.lessonId}, Completed: ${comp.completedAt}`);
    });

    // 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserFavoriteLesson –≤ user_favorite_lessons (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    console.log('\nüîÑ Migrating favorites data...');
    for (const favorite of favoritesDataUpper.rows) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const existing = await pool.query(`
          SELECT * FROM user_favorite_lessons 
          WHERE "userId" = $1 AND "lessonId" = $2
        `, [favorite.userId, favorite.lessonId]);

        if (existing.rows.length === 0) {
          await pool.query(`
            INSERT INTO user_favorite_lessons ("userId", "lessonId", "createdAt")
            VALUES ($1, $2, $3)
          `, [favorite.userId, favorite.lessonId, favorite.createdAt || new Date()]);
          console.log(`  ‚úÖ Migrated favorite: User ${favorite.userId}, Lesson ${favorite.lessonId}`);
        } else {
          console.log(`  ‚ö†Ô∏è  Favorite already exists: User ${favorite.userId}, Lesson ${favorite.lessonId}`);
        }
      } catch (error) {
        console.log(`  ‚ùå Error migrating favorite: ${error.message}`);
      }
    }

    // 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserLessonCompletion –≤ user_lesson_completions (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    console.log('\nüîÑ Migrating completions data...');
    for (const completion of completionsDataUpper.rows) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
        const existing = await pool.query(`
          SELECT * FROM user_lesson_completions 
          WHERE "userId" = $1 AND "lessonId" = $2
        `, [completion.userId, completion.lessonId]);

        if (existing.rows.length === 0) {
          await pool.query(`
            INSERT INTO user_lesson_completions ("userId", "lessonId", "completedAt")
            VALUES ($1, $2, $3)
          `, [completion.userId, completion.lessonId, completion.completedAt || new Date()]);
          console.log(`  ‚úÖ Migrated completion: User ${completion.userId}, Lesson ${completion.lessonId}`);
        } else {
          console.log(`  ‚ö†Ô∏è  Completion already exists: User ${completion.userId}, Lesson ${completion.lessonId}`);
        }
      } catch (error) {
        console.log(`  ‚ùå Error migrating completion: ${error.message}`);
      }
    }

    // 5. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è foreign key constraints
    console.log('\nüóëÔ∏è Cleaning up duplicate foreign key constraints...');
    
    const allConstraints = await pool.query(`
      SELECT 
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND (tc.table_name = 'user_favorite_lessons' OR tc.table_name = 'user_lesson_completions')
      ORDER BY tc.table_name, tc.constraint_name;
    `);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º constraints –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏ –∫–æ–ª–æ–Ω–∫–µ
    const constraintGroups = {};
    allConstraints.rows.forEach(constraint => {
      const key = `${constraint.table_name}.${constraint.column_name}`;
      if (!constraintGroups[key]) {
        constraintGroups[key] = [];
      }
      constraintGroups[key].push(constraint);
    });

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è constraints (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    for (const [key, constraints] of Object.entries(constraintGroups)) {
      if (constraints.length > 1) {
        console.log(`  Found ${constraints.length} constraints for ${key}`);
        
        // –£–¥–∞–ª—è–µ–º constraints, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for (const constraint of constraints) {
          const shouldKeep = 
            (constraint.column_name === 'lessonId' && constraint.foreign_table_name === 'Lesson') ||
            (constraint.column_name === 'userId' && constraint.foreign_table_name === 'users');
          
          if (!shouldKeep) {
            try {
              console.log(`    Dropping incorrect constraint: ${constraint.constraint_name}`);
              await pool.query(`ALTER TABLE ${constraint.table_name} DROP CONSTRAINT IF EXISTS ${constraint.constraint_name}`);
            } catch (error) {
              console.log(`      Warning: ${error.message}`);
            }
          } else {
            console.log(`    Keeping correct constraint: ${constraint.constraint_name} -> ${constraint.foreign_table_name}`);
          }
        }
      }
    }

    // 6. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    console.log('\nüóëÔ∏è Removing uppercase tables after data migration...');
    
    const tablesToRemove = ['UserFavoriteLesson', 'UserLessonCompletion', 'User'];
    
    for (const tableName of tablesToRemove) {
      try {
        console.log(`  Dropping table "${tableName}"`);
        await pool.query(`DROP TABLE IF EXISTS "${tableName}" CASCADE`);
        console.log(`    ‚úÖ Dropped "${tableName}"`);
      } catch (error) {
        console.log(`    ‚ùå Error dropping "${tableName}": ${error.message}`);
      }
    }

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìã Final database state:');
    
    const finalTables = await pool.query(`
      SELECT table_name
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name;
    `);
    
    console.log('Remaining tables:');
    finalTables.rows.forEach(table => {
      console.log(`  - ${table.table_name}`);
    });

    const finalConstraints = await pool.query(`
      SELECT 
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND (tc.table_name = 'user_favorite_lessons' OR tc.table_name = 'user_lesson_completions')
      ORDER BY tc.table_name, tc.constraint_name;
    `);
    
    console.log('\nFinal foreign key constraints:');
    finalConstraints.rows.forEach(constraint => {
      console.log(`  ‚úÖ ${constraint.table_name}.${constraint.column_name} -> ${constraint.foreign_table_name}.${constraint.foreign_column_name}`);
    });

    console.log('\n‚úÖ Migration and cleanup complete!');

  } catch (error) {
    console.error('‚ùå Error during migration and cleanup:', error);
  } finally {
    await pool.end();
  }
}

migrateAndCleanupData();